"""
Django settings for booking project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ha57j$lb)k0fv2r+^c(9$*q6njh(%x)%p42e%h2z82r7dvve7='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # external apps
    'rest_framework',
    'rest_framework.authtoken',
    # https://dj-rest-auth.readthedocs.io/en/latest/installation.html
    'dj_rest_auth',
    # https://dj-rest-auth.readthedocs.io/en/latest/installation.html#registration-optional
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'dj_rest_auth.registration',
    # https://drf-spectacular.readthedocs.io/en/latest/readme.html#installation
    'drf_spectacular',
    # https://www.django-rest-framework.org/api-guide/filtering/#djangofilterbackend
    'django_filters',
    # internal apps
    'accounts',
    'hotel.apps.HotelConfig',
    'airplane.apps.AirplaneConfig',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'booking.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'booking.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/


LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    # Permissions
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # Jwt
        'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    # Pagination
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 6,
    # Swagger
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',

    'DEFAULT_FILTER_BACKENDS': [
        # | Filtering
        'django_filters.rest_framework.DjangoFilterBackend',
        # for Filtering you should add filterset_fields = [] in views for defined witch field do you want to filter.

        # | Search
        'rest_framework.filters.SearchFilter',
        # for Search, you should add search_fields = [] in views for defined witch field do you want to search.

        # | Ordering
        'rest_framework.filters.OrderingFilter',
        # for Ordering, you should add ordering_fields = [] in views for defined witch field do you want to order.
        # or for set default ordering you can add ordering = ['username'].

    ],
}

# setting of Jwt.
REST_AUTH = {
    'USE_JWT': True,
    'JWT_AUTH_COOKIE': 'booking-auth',
    'JWT_AUTH_REFRESH_COOKIE': 'booking-refresh-token',
    # if refresh token doesn't work add this.
    'JWT_AUTH_HTTPONLY': False,
}

SITE_ID = 1


# setting of SPECTACULAR package for Swagger.
SPECTACULAR_SETTINGS = {
    'TITLE': 'booking',
    'DESCRIPTION': 'booking project',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}


# for set custom model User in your project.
AUTH_USER_MODEL = 'accounts.User'
